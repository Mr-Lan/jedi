"import namedCharRef from './named-char-ref'"
"import string, codepoint from '../util/ometa-string'"
"import UnicodeText from './text'"
"export Expression"

ometa Expression {

	keyword	=	("not" | "if" | "then" | "else" | "mod" | "div" | "mul" | "&&" | "-") ~nameChar,

	primary = tupleLiteral | listLiteral | recordLiteral | literal | symbol,

	symbol	=	<'*' | ~keyword nameChar+>:s -> [#Symbol, string(s)],
	nameChar	=	UnicodeText.nameChar | '$',

	literal = (nullLiteral | booleanLiteral | numberLiteral
		| stringLiteral | quasiLiteral):lit ~nameChar -> lit,

	nullLiteral "null" -> [#Null],

	booleanLiteral "true"	-> [#True],
	booleanLiteral "false"	-> [#False],

	numberLiteral "NaN"	-> [#NaN],
	numberLiteral "INF"	-> [#PosInf],
	numberLiteral "+INF"	-> [#PosInf],
	numberLiteral "-INF"	-> [#NegInf],
	numberLiteral "∞"	-> [#PosInf],
	numberLiteral "+∞"	-> [#PosInf],
	numberLiteral "-∞"	-> [#NegInf],

	numberLiteral <signedInt ('.' digit+)? ('e' signedInt)?>:n
		-> [#Number, parseFloat(string(n))],
	signedInt = <('+' | '-')? digit+>,

	stringLiteral
		'\''
		<(~'\'' char | '\'' '\'' -> '\'')*>:s
		'\''
		-> [#String, string(s)],

	quasiLiteral
		symbol?:tag
		'"'
		(interpolation | stringLiteralSection)*:s
		'"'
		-> [#Quasi, tag, s],

	interpolation	= ('\\' '(' expression:expr ')' | '{' expression:expr '}') -> expr,
	stringLiteralSection = <(escapedChar | ~('"' | '\\' | '{') char)+:cooked>:raw
		-> [#String, cooked.join(''), raw],

	escapedChar '\\' 'b' -> '\u0008',
	escapedChar '\\' 't' -> '\u0009',
	escapedChar '\\' 'n' -> '\u000a',
	escapedChar '\\' 'v' -> '\u000b',
	escapedChar '\\' 'f' -> '\u000c',
	escapedChar '\\' 'r' -> '\u000d',
	escapedChar '\\' <hex hex? hex? hex? hex? hex?>:u space?	-> codepoint(u),
	escapedChar '\\' 'u' <hex hex hex hex>:u	-> codepoint(u),
	escapedChar '\\' 'u' '{' <hex+>:u '}'	-> codepoint(u),
	escapedChar '\\' <'&' (~';' char)+ ';'>:entity	-> namedCharRef(entity),
	escapedChar '\\' (~'(' char):c -> c,
	hex = char:c ?/[0-9a-f]/i.test(c),


	comma = spaces ',' spaces,

	commaList string:rule	=	(apply(rule):x comma -> x)*:list
			apply(rule)?:last !{ if (last) list.push(last) }
		-> list,

	spread = "..." spaces expression:x -> [#Spread, x],

	listLiteral	= '[' spaces commaList('listItem'):x spaces ']' -> [#List, x],
	listItem	= spread | expression,

	recordLiteral	= '{' spaces commaList('recordItem'):x spaces '}' -> [#Record, x],
	recordItem	= spread
		| '[' expression:key ']' spaces ':' spaces expression:value	-> [#RecordItem, key, value]
		| symbol:x spaces ':' spaces expression:value	-> [#RecordItem, x[1], value]
		| symbol:x	-> [#RecordItem, x[1], x],

	tupleLiteral = '(' spaces commaList('expression'):x spaces ')' -> [#Tuple, x],


	bindingPattern = listPattern | recordPattern | symbol,

	restPattern = "..." spaces symbol:x -> [#RestPattern, x],

	listPattern	= '[' spaces commaList('listItemPattern'):x spaces ']' -> [#ListPattern, x],
	listItemPattern	= restPattern | bindingPattern,

	recordPattern	= '{' spaces commaList('recordItemPattern'):x spaces '}' -> [#RecordPattern, x],
	recordItemPattern	= restPattern
		| '[' expression:key ']' spaces ':' spaces bindingPattern:bind	-> [#MappingPattern, key, bind]
		| symbol:x spaces ':' spaces bindingPattern:bind	-> [#MappingPattern, x[1], bind]
		| symbol:x	-> [#MappingPattern, x[1], x],

	tuplePattern = '(' spaces commaList('bindingPattern'):x spaces ')' -> [#TuplePattern, x],


	binOp string:left string:op string:right = apply(left):x,

	// x.name | x?.name
	refExp = refExp:x (``.'' | ``?.''):op symbol:name -> [op, x, name],
	// x(y) | x[y]
	refExp = refExp:x spaces (tupleLiteral | listLiteral):y -> [#Call, x, y],
	// x 0 | x y | x {record}
	refExp = refExp:x space+ (literal | symbol | recordLiteral):y -> [#Call, x, y],
	refExp = primary,

	rangeExp = refExp:x spaces (``...'' | ``..<''):op spaces refExp:y -> [op, x, y],
	rangeExp = refExp,

	concatExp = concatExp:x "++" exp1 -> [#Concat, x, y], // x ++ y

	expression = conditionExpr,
	conditionExpr = "if" spaces exp1:x spaces "then" spaces exp1:y spaces ("else" spaces conditionExpr:z)?
		->	[#Ternary, x, y, z] | exp1,
	exp1 = exp1:x op1:op exp2:y -> [#BinaryOp, op, x, y] | exp2,
	exp2 = exp2:x op2:op exp3:y -> [#BinaryOp, op, x, y] | exp3,
	exp3 = exp3:x op3:op exp4:y -> [#BinaryOp, op, x, y] | exp4,
	exp4 = exp4:x op4:op exp5:y -> [#BinaryOp, op, x, y] | exp5,
	exp5 = exp5:x op5:op exp6:y -> [#BinaryOp, op, x, y] | exp6,
	exp6 = exp6:x op6:op exp7:y -> [#BinaryOp, op, x, y] | exp7,
	exp7 = exp7:x op7:op exp8:y -> [#BinaryOp, op, x, y] | exp8,
	exp8 = rangeExp | exp9,
	exp9 = op9:op refExp:x -> [#UnaryOp, op, x] | refExp,

	op1 = spaces ("->" | "<-"):x spaces -> x,
	op2 = spaces ("||" | "&&"):x spaces -> x,
	op3 = spaces ("===" | "!==" | "==" | "!=" | "<=>" | ">=" | "<=" | ">" | "<"):x spaces -> x,
	op4 = spaces ("<<<" | ">>>" | "<<" | ">>"):x spaces -> x,
	op5 = spaces ("?:"):x spaces -> x,
	op6 = spaces ("+" | "-"):x spaces -> x,
	op7 = spaces ("×" -> "mul" | "÷" -> "div" | "mul" | "div" | "mod"):x spaces -> x,
	op9 = spaces ('!' | "not"):x spaces -> x,

	// for future use
	path = symbol?:start segment+:segments
		-> [#Path, start].concat(segments),
	segment = '/' <segmentChar*>,
	segmentChar = ~(space | ambigSep | '/' | '?' | '#') char,
	ambigSep = (',' | ']' | ')') (space | end),

	END
}
