"import string, flattenLines from '../util/ometa-string'"
"module jediRuntime at './php-runtime'"
"import PHP5Transpiler_init, collectSymbols, assignment, phpAssignment from './PHP5Transpiler'"
"export PHP5Transpiler, PHP5TranspilerWithDebug"

ometa Beautify {
	document = lines:x -> deleteRedundantEcho(x),
	lines newline:nl	=	string:s	->	s.split(nl),
	newline	->	/\r?\n/,

	END
}

ometa PHP5Transpiler {

	document = [#document [string:filename number number] anything:source undefined topBlock:xs]
		-> (jediRuntime() + '\n' + flattenLines(xs).join('\n')),

	topBlock = [ignore*:x doctype:y node*:xs] -> x.concat(y, xs),
	block = [node*:x] -> x,

	position = [string:filename number:line number:col]	-> [filename, line, col],
	position = [number:line number:col]	-> ['*', line, col], // for compatibility

	ignore	=	[char*:s]	->	string(s), // empty or ignore

	node ignore,
	node [#closeStartTag] -> this.output.closeStartTag(),
	node [(#MixedWhitespace | #Offside | #Section | #Error):syntaxError position:pos anything*:data]
		-> { var err = new Error(syntaxError); err.position = pos; err.data = data; throw err; },
	node [string:nodeType position:pos apply(nodeType):x] -> this.attachDebugInfo(x, pos),
	node :unknown -> { throw new Error(unknown) },

	doctype = [#comment position [outputMethod:x]] -> x | -> ["echo '<!doctype html>', \"\\n\";"],
	outputMethod [spaces ("html" spaces? "5"?) spaces] -> ["echo '<!doctype html>', \"\\n\";"],
	outputMethod [spaces ("xhtml" !this.setOutputMethod('xhtml') spaces "mobile") spaces] -> ["echo '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">', \"\\n\";"],
	outputMethod [spaces ("xhtml" !this.setOutputMethod('xhtml') spaces "mp 1.0") spaces] -> ["echo '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.0//EN\" \"http://www.wapforum.org/DTD/xhtml-mobile10.dtd\">', \"\\n\";"],
	outputMethod [spaces ("xhtml" !this.setOutputMethod('xhtml') spaces "mp 1.1") spaces] -> ["echo '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.1//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile11.dtd\">', \"\\n\";"],
	outputMethod [spaces ("xhtml" !this.setOutputMethod('xhtml') spaces "mp 1.2") spaces] -> ["echo '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">', \"\\n\";"],
	outputMethod [spaces ("xhtml" !this.setOutputMethod('xhtml') spaces "basic") spaces] -> ["echo '<!doctype html>', \"\\n\";"],
	outputMethod [spaces ("xml" !this.setOutputMethod('xml')) spaces] -> ["echo '<?xml version=\"1.0\" encoding=\"utf-8\"?>', \"\\n\";"],

	tupleItem [#Mapping [#Symbol :key] trans:expr] -> ("'" + key + "' => " + expr),


	literal [#Null]	->	'null',
	literal [#True]	->	'true',
	literal [#False]	->	'false',
	literal [#NaN]	->	'NAN',
	literal [#PosInf]	->	'+INF',
	literal [#NegInf]	->	'-INF',
	literal [#Number :n]	->	String(n),

	stringLiteral [#String :s]	->	("'" + s.replace(/'/g, "\\'") + "'"),
	templateLiteral [#Quasi undefined [trans*:list]]	->	('(' + list.join(') . (') + ')'),
	listLiteral [#List [expr*:list]]	->	('[' + list.join(', ') + ']'),
	recordLiteral [#Record [recordItem*:list]]	->	('(object)[' + list.join(', ') + ']'),
	recordItem [#RecordItem string:s trans:value]	->	("'" + s + "' => " + value),
	recordItem [#RecordItem trans:key trans:value]	->	(key + ' => ' + value),

	//call ["." [#Symbol 'url'] [#Symbol 'static']]	-> 'UrlBuilder::staticResource',
	call ['.' [#Symbol :s externalSymbol(s):x] [#Symbol :y]]	-> (x + '::' + y),
	call ['.' expr:x [#Symbol :y]]	->	(x + '->' + y),
	call ['?.' expr:x [#Symbol :y]]	->	('(' + x + ' ? ' + x + '->' + y + ' : null)'),

	call [#Call [#Symbol :s externalSymbol(s):x] &[#Tuple :_] trans:y]	->	(x + y),
	call [#Call [#Symbol :s externalSymbol(s):x] trans:y]	->	(x + '(' + y + ')'),
	call [#Call trans:x [#List [trans:y]]]	->	(x + '[' + y + ']'),
	call [#Call trans:x &[#Tuple :_] trans:y]	->	(x + y),
	call [#Call trans:x trans:y]	->	(x + '(' + y + ')'),

	range ['...' trans:x trans:y]	->	('(range(' + x + ', ' + y + '))'),
	range ['..<' trans:x trans:y]	->	('(range(' + x + ', ' + y + ' - 1))'),
	bin [#BinaryOp 'mod' trans:x trans:y]	->	('(' + x + ' ' + '%' + ' ' + y + ')'),
	bin [#BinaryOp 'div' trans:x trans:y]	->	('(' + x + ' ' + '/' + ' ' + y + ')'),
	bin [#BinaryOp 'mul' trans:x trans:y]	->	('(' + x + ' ' + '*' + ' ' + y + ')'),
	bin [#BinaryOp :op trans:x trans:y]	->	('(' + x + ' ' + op + ' ' + y + ')'),
	bin [#UnaryOp :op trans:x]	->	('!' + x),
	symbol [#Symbol '*']	->	'$context',
	symbol [#Symbol :s externalSymbol(s):x]	->	x,
	symbol [#Symbol :s resolve(s):x]	->	x,

	ternary [#Ternary expr:x expr:y undefined]	->	('(' + x + ') ? (' + y + ') : null'),
	ternary [#Ternary expr:x expr:y expr:z]	->	('(' + x + ') ? (' + y + ') : (' + z + ')'),

	expr	=	literal | stringLiteral | templateLiteral | listLiteral | recordLiteral | symbol | call | range | bin | ternary,

	trans	=	expr,

	trans [#String :s :raw]	->	(this.output.convertNewlines("'" + s.replace(/'/g, '\\\'') + "'")),
	trans [#Tuple [trans*:list]]	->	('(' + list.join(', ') + ')'),
	trans [#Tuple [tupleItem*:list]]	->	('[' + list.join(', ') + ']'),
	trans [#Error position:pos]
			-> { var err = new Error('TranspilingError'); err.position = pos; throw err; },
	trans :unknown	->	['/*', JSON.stringify(unknown), '*/'],


	//trans [trans*:x] -> ( x ),


	comment [:line] -> ["echo '<!-- " + this.output.escapeComment(simpleString(line)) + " -->';"],
	comment [echoComment*:xs] -> [].concat(
			"echo '<!--', \"\\n\";",
			xs,
			"echo '-->';"
		),
	echoComment [char*:s] -> ("echo '" + this.output.escapeComment(simpleString(s)) + "', \"\\n\";"),

	scriptsource [scriptsourceLine*:lines]	->	echoLines(lines),
	scriptsourceLine string:s	->	("'" + this.output.escapeScriptSource(simpleString(s)) + "', \"\\n\""),

	text stringLiteral:s	->	['echo ' + this.output.escapeText(s) + ';'],
	text templateLiteral:s	->	['echo ' + this.output.phpEscapeText(s) + ';'],
	text undefined [textLine*:lines]	->	echoLines(lines),
	text undefined [echoTemplateString*:lines]	->	lines,

	textLine string:s	->	("'" + this.output.escapeText(simpleString(s)) + "', \"\\n\""),
	echoTemplateString []	->	'',
	echoTemplateString [trans+:exprList]	->	('echo ' + this.output.phpEscapeText('(' + exprList.join(') . (') + ')') + ';'),
	//	-> dom.text(lines),

	element [:tag :cls :id] undefined
		{this.output.startTag(tag, cls, id)}:startT
		enterBlock([]) &anything:children block:body exitBlock:param
		{this.output.endTag(tag)}:endT
		-> this.elementOutput(tag, cls, id, undefined, children, body, startT, endT, param),

	element [:tag :cls :id] trans:bind
		{this.output.startTag(tag, cls, id)}:startT
		enterBlock([]) &anything:children block:body exitBlock:param
		{this.output.endTag(tag)}:endT
		-> this.elementOutput(tag, cls, id, bind, children, body, startT, endT, param),


	attribute :name undefined undefined	->	["echo ' " + name + "';"],
	attribute :name undefined	->	["echo ' " + name + "';"],
	attribute :name :op undefined	->	["echo ' " + name + "';"],
	attribute :name :op [#String :s] -> ["echo ' " + name + '="' + "" + this.output.attrValue(simpleString(s)) + "\"';"],
	attribute :name :op [#Quasi undefined echoTemplateString:line] -> ["echo ' " + name + '="' + "';",  line, "echo '\"';"],
	attribute :name :op trans:exp -> ["echo jedi_runtime_attribute('" + name + "', " + exp + ");"],

	binding :_ trans:expr [] -> ['echo ' + this.output.phpEscapeText(expr) + ';'],
	//binding trans:expr [] -> ["$__temp = " + expr + "; if (method_exists($__temp, '__toString')) echo htmlspecialchars($__temp); else print_r($__temp);"],
	binding :_ trans:expr enterBlock([]) block:body exitBlock:param
		-> closure(expr, body, param),

	instruction #external ![]:xs [[#Symbol :x !xs.push(x) saveExternalSymbol(x)]+] :_
		-> ('// external ' + xs.join(', ') + '\n'),

	instruction #if trans:expr block:b -> ["if (" + expr + ") {", b, "}"],
	instruction #elseif trans:expr block:b -> ["else if (" + expr + ") {", b, "}"],
	instruction #else :_ block:b -> ["else {", b, "}"],

	instruction #let [([bindingPattern:bind trans:expr] -> [bind, expr])+:binds] createBindings(collectSymbols(binds)):realBindings
		->	phpAssignment(realBindings),
	instruction #letlocal [([bindingPattern:bind trans:expr] -> [bind, expr])+:binds] enterBlock(collectSymbols(binds)) block:b exitBlock:param
		->	assignment(binds, b, param),
	instruction #for [([bindingPattern:bind trans:expr] -> [bind, expr])+:binds] enterBlock(collectSymbols(binds)) block:b exitBlock
		->	translateMultiLoops(binds, b),

	instruction #unsafe trans:x :_ -> ('echo ' + x + ';'),
	instruction #d trans:x :_	->	('var_dump(' + x + ');'),
	instruction #end :x :_	-> ('// end ' + x),

	bindingPattern [#Symbol :v] -> [[v], '$' + v],
	bindingPattern [#TuplePattern [[#Symbol :key] [#Symbol :value]]] -> [[key, value], '$' + key + ' => $' + value],
	bindingPattern [#ListPattern [bindingPattern*:bindings]]
		-> ([
			bindings.reduce(function (a, b) { return a.concat(b[0]) }, []),
			bindings.reduce(function (a, b) { return a.concat(b[1]) }, [])
		]),

	suppress :lines -> (lines.map(function(line){ return '// ' + line })),
	fragment :name :_ block:b -> ['//  #' + name, b],
	macro :elementPattern paramPattern:parameter enterBlock(parameter) block:body exitBlock:free saveMacro(elementPattern, parameter, body, free)
		-> ['// define ' + elementPattern],

	paramPattern [#TuplePattern [([#Symbol :name] -> name)*:names]] -> names,

	endElement -> '',

	inject :x :y [string*:lines] resolve(#data) -> [x + ';'].concat(lines.map(function(l){ return '//' + l })),
	inject :x :y block:body resolve(#data) -> [x, '{', body, '}'],
	/*filter [#Symbol [``if'']] [spaces Expression.expression:exp node(exp):x] block:body
		-> ['if (' + x + ') {', body, '}'],
	filter [#Symbol [``else'']] :x block:body
		-> ['else {', body, '}'],

	Quasi :tag [trans*:templateStrings]
		-> [echo(closeStartTag()) + "Jedi::Quasi(" +
			(tag ? "'" + tag.join('') + "'": null) +
			", " +
			templateStrings.join(', ') +
			');'],

	//directive :type [apply(type):x] -> x,
	//node = directive (#Comment | #Suppress | #Inject | #Element | #Text | #Filter)
	//Element :tag [:cls, :id] :body ->*/

	END
}

PHP5Transpiler.initialize = PHP5Transpiler_init

ometa PHP5TranspilerWithDebug <: PHP5Transpiler {}

PHP5TranspilerWithDebug.initialize = function () {
	PHP5Transpiler.initialize.apply(this, arguments)
	this.attachDebugInfo = function (x, pos) {
		return [
			'// ' + pos[1] + ', ' + pos[2] + ' @ ' + pos[0]
		].concat(x)
	}
}
